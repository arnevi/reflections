When would you want to use a remote repository rather than keeping all your work
local?
	- 	When working with other developers on e.g. a project, sharing code using GitHub very usefull 
		All developers can then pull and push files/code using GitHub, to stay updated on prosject and changes
    

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
-	Too have control with what you pust to the remote repository.
		If this was done automatically you could end up pushing code you
		dont want too the remote repository. You also got a lot of unneccesary 
		pushes if this was done automatically. 

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?
	Branching means you diverge from the main line of development and continue to do work without messing with that main line.
		If you e.g. want to experiment with code you may create a branch to work on.
	By cloning you get a 'local copy' of an GitHub repository. You clone/copy a GitHub repository to your local machine. 
		If you want to contribute to a GitHub repository, you can clone a GitHub repository to get a local copy.
	A fork can bee seen as a clone that GitHub makes on their machine 
		If you want too share your code in the GitHub repository with others, but dont want to allow changes, you can allow forking your repository on GitHub.


What is the benefit of having a copy of the last known state of the remote
stored locally?
 	- You can use fetching when you want to see what everybody else has been working on.
 	  Once you have fetched, you dont need integnet access to see what have changed compared to your local reposititory 
 	

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?
	- Sharing code and collaborate with others would be difficult without using Git and GitHub or a simular software.
	  With Git and GitHub you may e.g doing code-review by making your code visible to others, before merging to the master branch.
	  You also have full history/backlog of the code/files when using Git and GitHub
	- Cant think of anything that would be easier when collaborating, by not using Git and GitHub  




Reflect: When to use a separate branch
You just saw that the workflow when making changes in a separate branch is more complicated than working directly in master, especially when you need to stay up-to-date with changes others are making. Rather than simply pulling and pushing, you need to pull changes into your local master branch, merge the local master into your branch (different-oil, in our case), then push your branch to the remote before finally merging your branch into master, either locally or on GitHub.
Given that, please add the following question and your thoughts on it to your reflections file:
When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?
	- Working in seperate branches is usefull when you e.g work on multiple scenarios, and not certain when each one is ready to be deployed.
	  One sceario might be some new functionality, anotherone a bux-fix, and a third some experimental code.
	  And if you collaborate with others on the same project, and you are working in separate branches, enables you to e.g do code-review on each others branch
	  before merging to the master branch.(localy and GitHub)
